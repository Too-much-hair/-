typedef struct{
int weight;
int parent,lch,rch;
}HTNode,*HuffmanTree;
HuffmanTree H;//定义一个数组
//第一个节点权值为5，即可表示为H[i].weight=5;
//初始化一个2n的数组（初始化全为0）
//哈夫曼树构造的算法
void CreatHuffmanTree(HuffmanTree HT,int n)
{
if(n<=1)return ;
m=2*n-1;
HT=new HTNode[m+1];
for(i=1;i<=m;i++)
{HT[i].lch=0;HT[i].rch=0;HT[i].parent=0;}
for(i=1;i<n;i++)cin>>HT[i].weight;//初始化结束
for(i=n+1;i<=m;i++)
{
Select(HT,i-1,s1,s2);
//在HT[k]中选择两个双亲域为0，且权值最小的结点，并返回他们在HT中的序号s1和s2中
HT[s1].parent=i;HT[s2].parent=i;
HT[i].lch=s1;HT[i].rch=s2;HT[i].weight=HT[s1].weight+HT[s2].weight;}
}


//----0和1的赋值
void CreatHuffmanCode(HuffmanTree HT,HuffmanCode &HC,int n)
{//从叶子结点到根逆向求每个字符的哈夫曼编码，存储在编码表HC中
HC=new char *[n+1];//分配n个字符编码的头指针矢量
cd=new char[n];//分配临时存放编码的动态数组空间
cd[n-1]='\0';
for(i=1,i<=n;i++){
start=n-1;c=i;f=HT[i].parent;
while(!f=0){
--start;
if(HT[f].lchild==c)cd[start]='0';
else cd[start]='1';
c=f;f=HT[f].parent;}
HC[i]=new char[n-start];
strcpy(HC[i],&cd[start]);
}
delete cd;
}


